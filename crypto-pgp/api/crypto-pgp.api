public final class dev/msfjarvis/aps/data/crypto/GPGKeyManager : dev/msfjarvis/aps/data/crypto/KeyManager {
	public fun <init> (Ljava/lang/String;Lkotlinx/coroutines/CoroutineDispatcher;Ldev/msfjarvis/aps/data/crypto/GPGKeyPair$Factory;)V
	public fun addKey (Ldev/msfjarvis/aps/data/crypto/GPGKeyPair;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public synthetic fun addKey (Ldev/msfjarvis/aps/data/crypto/KeyPair;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun addKey (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun findKeyById (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun listKeyIds (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun listKeys (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun removeKey (Ldev/msfjarvis/aps/data/crypto/GPGKeyPair;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public synthetic fun removeKey (Ldev/msfjarvis/aps/data/crypto/KeyPair;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/msfjarvis/aps/data/crypto/GPGKeyPair : dev/msfjarvis/aps/data/crypto/KeyPair {
	public fun <init> (Lcom/proton/Gopenpgp/crypto/Key;)V
	public fun getKeyId ()Ljava/lang/String;
	public fun getPrivateKey ()[B
	public fun getPublicKey ()[B
}

public abstract interface class dev/msfjarvis/aps/data/crypto/GPGKeyPair$Factory {
	public abstract fun create (Lcom/proton/Gopenpgp/crypto/Key;)Ldev/msfjarvis/aps/data/crypto/GPGKeyPair;
}

public final class dev/msfjarvis/aps/data/crypto/GopenpgpCryptoHandler : dev/msfjarvis/aps/data/crypto/CryptoHandler {
	public fun <init> (Ldev/msfjarvis/aps/data/crypto/GPGKeyManager;)V
	public fun canHandle (Ljava/lang/String;)Z
	public fun decrypt (Ljava/lang/String;[B[B)[B
	public final fun decryptFromKeyId (Ljava/lang/String;[BLjava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun encrypt (Ljava/lang/String;[B)[B
}

