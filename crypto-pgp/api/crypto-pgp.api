public final class dev/msfjarvis/aps/data/crypto/GPGKeyManager : dev/msfjarvis/aps/data/crypto/KeyManager {
	public fun <init> (Ljava/lang/String;Lkotlinx/coroutines/CoroutineDispatcher;)V
	public fun addKey (Ldev/msfjarvis/aps/data/crypto/GPGKeyPair;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public synthetic fun addKey (Ldev/msfjarvis/aps/data/crypto/KeyPair;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun canHandle (Ljava/lang/String;)Z
	public fun getAllKeys (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getKeyById (Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun removeKey (Ldev/msfjarvis/aps/data/crypto/GPGKeyPair;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public synthetic fun removeKey (Ldev/msfjarvis/aps/data/crypto/KeyPair;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class dev/msfjarvis/aps/data/crypto/GPGKeyPair : dev/msfjarvis/aps/data/crypto/KeyPair {
	public fun <init> (Lcom/proton/Gopenpgp/crypto/Key;)V
	public fun getKeyId ()Ljava/lang/String;
	public fun getPrivateKey ()[B
	public fun getPublicKey ()[B
}

public final class dev/msfjarvis/aps/data/crypto/GopenpgpCryptoHandler : dev/msfjarvis/aps/data/crypto/CryptoHandler {
	public fun <init> ()V
	public fun canHandle (Ljava/lang/String;)Z
	public fun decrypt (Ljava/lang/String;[B[B)[B
	public fun encrypt (Ljava/lang/String;[B)[B
}

