/*
 * Copyright Â© 2014-2019 The Android Password Store Authors. All Rights Reserved.
 * SPDX-License-Identifier: GPL-3.0-only
 */
plugins {
    id 'kotlin-android'
    id 'kotlin-kapt'
}

repositories {
    maven { url 'https://jitpack.io' }
}

final def keystorePropertiesFile = rootProject.file 'keystore.properties'

final def gitHash = { ->
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short=12', 'HEAD'
        standardOutput = stdout
    }
    stdout.toString().trim()
}

final def isCi() {
    return System.env['GITHUB_WORKFLOW'] != null
}

android {
    if (!isCi()) {
        android.applicationVariants.all { final variant ->
            variant.outputs.all {
                outputFileName = "password-store_${gitHash()}.apk"
            }
        }
    }
    defaultConfig {
        applicationId 'com.zeapo.pwdstore'
    }
    buildFeatures.viewBinding = true

    lintOptions {
        abortOnError = true // make sure build fails with lint errors!
    }

    packagingOptions {
        exclude '.readme'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'GIT_HASH', '\"\"'
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            minifyEnabled false
            buildConfigField 'String', 'GIT_HASH', isCi() ? "\"${gitHash()}\"" : '\"\"'
        }
        dev {
            initWith debug
            debuggable true
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
        }
        defaultConfig {
            // Specifies the application ID for the test APK.
            testApplicationId "com.test.zeapo.pwdstore"
            // Specifies the fully-qualified class name of the test instrumentation runner.
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            // If set to 'true', enables the instrumentation class to start and stop profiling.
            // If set to false (default), profiling occurs the entire time the instrumentation
            // class is running.
            testHandleProfiling true
            // If set to 'true', indicates that the Android system should run the instrumentation
            // class as a functional test. The default value is 'false'
            testFunctionalTest true
        }
    }
    if (keystorePropertiesFile.exists()) {
        final def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        signingConfigs {
            release {
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
                storeFile = rootProject.file keystoreProperties['storeFile']
                storePassword = keystoreProperties['storePassword']
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    }

    sourceSets {
        androidTest.java.srcDirs += "src/androidTest/kotlin"
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }
}

kapt {
    correctErrorTypes = true
}

dependencies {
    implementation deps.androidx.annotation
    implementation deps.androidx.appcompat
    implementation deps.androidx.biometric
    implementation deps.androidx.cardview
    implementation deps.androidx.core_ktx
    implementation deps.androidx.constraint_layout
    implementation deps.androidx.documentfile
    implementation deps.androidx.fragment_ktx
    implementation deps.androidx.lifecycle
    implementation deps.androidx.lifecycle_java8
    implementation deps.androidx.lifecycle_livedata
    implementation deps.androidx.material
    implementation deps.androidx.preference
    implementation(deps.androidx.recycler_view) {
        force = true
    }
    implementation deps.androidx.room
    implementation deps.androidx.room_ktx

    implementation deps.third_party.commons_io
    implementation deps.third_party.commons_codec
    implementation deps.third_party.epoxy
    implementation(deps.third_party.jgit) {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    implementation deps.third_party.jsch
    implementation deps.third_party.openpgp_ktx
    implementation deps.third_party.ssh_auth

    kapt deps.androidx.room_compiler
    kapt deps.third_party.epoxy_annotation

    // Testing-only dependencies
    androidTestImplementation deps.testing.androidx.core_testing
    androidTestImplementation deps.testing.androidx.espresso_core
    androidTestImplementation deps.testing.androidx.espresso_intents
    androidTestImplementation deps.testing.androidx.junit
    androidTestImplementation deps.testing.androidx.rules
    androidTestImplementation deps.testing.androidx.runner
    androidTestImplementation deps.testing.junit
    androidTestImplementation deps.testing.mockito_core
}
